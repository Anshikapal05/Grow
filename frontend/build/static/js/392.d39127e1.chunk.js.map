{"version":3,"file":"static/js/392.d39127e1.chunk.js","mappings":"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","sources":["../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","../node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js","pages/consumer/FeedbackForm.jsx"],"sourcesContent":["export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.3.3');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n","import React, { useRef } from \"react\";\r\nimport emailjs from \"@emailjs/browser\";\r\n\r\nconst FeedbackForm = () => {\r\n  //const [name, setName] = useState(\"\");\r\n  //const [email, setEmail] = useState(\"\");\r\n  //const [message, setMessage] = useState(\"\");\r\n  const form = useRef();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    emailjs\r\n      .sendForm(\"service_t2k43a8\", \"template_hgi7l3r\", form.current, {\r\n        publicKey: \"t32ffvFY73OugivhP\",\r\n      })\r\n      .then(\r\n        () => {\r\n          console.log(\"SUCCESS!\");\r\n        },\r\n        (error) => {\r\n          console.log(\"FAILED...\", error.text);\r\n        }\r\n      );\r\n\r\n    //setName(\"\");\r\n    //setEmail(\"\");\r\n    //setMessage(\"\");\r\n  };\r\n\r\n  // const handleSubmit = (e) => {\r\n  //   e.preventDefault();\r\n  //   // Here you would typically handle the form submission,\r\n  //   // such as sending the data to a server.\r\n  //   console.log('Feedback submitted:', { name, email, message });\r\n  //   // Clear the form fields\r\n  //   setName('');\r\n  //   setEmail('');\r\n  //   setMessage('');\r\n  // };\r\n\r\n  return (\r\n    // <div className=\"feedback-form-container\">\r\n    //   <h2>Feedback Form</h2>\r\n    //   <form onSubmit={handleSubmit}>\r\n    //     <div className=\"form-group\">\r\n    //       <label htmlFor=\"name\">Name:</label>\r\n    //       <input\r\n    //         type=\"text\"\r\n    //         id=\"name\"\r\n    //         name='from_name'\r\n    //         value={name}\r\n    //         onChange={(e) => setName(e.target.value)}\r\n    //         required\r\n    //       />\r\n    //     </div>\r\n    //     <div className=\"form-group\">\r\n    //       <label htmlFor=\"email\">Email:</label>\r\n    //       <input\r\n    //         type=\"email\"\r\n    //         id=\"email\"\r\n    //         name=\"user_email\"\r\n    //         value={email}\r\n    //         onChange={(e) => setEmail(e.target.value)}\r\n    //         required\r\n    //       />\r\n    //     </div>\r\n    //     <div className=\"form-group\">\r\n    //       <label htmlFor=\"message\">Feedback:</label>\r\n    //       <textarea\r\n    //         id=\"message\"\r\n    //         name=\"message\"\r\n    //         value={message}\r\n    //         onChange={(e) => setMessage(e.target.value)}\r\n    //         required\r\n    //       ></textarea>\r\n    //     </div>\r\n    //     <button className=\"form-btn\" type=\"submit\">Submit</button>\r\n    //   </form>\r\n    // </div>\r\n    <div className=\"feedback-form-container\">\r\n      <h2>Feedback Form</h2>\r\n      \r\n      <form onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" name=\"from_name\" className=\"input-field\" />\r\n      </div>\r\n      <div className=\"form-group\">\r\n      <label>Email</label>\r\n      <input type=\"email\" name=\"user_email\" className=\"input-field\" />\r\n      </div>\r\n      <div className=\"form-group\">\r\n      <label>Message</label>\r\n      <textarea name=\"message\" className=\"textarea-field\" />\r\n      </div>\r\n      <button className=\"form-btn\" type=\"submit\">Submit</button>\r\n    </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackForm;\r\n"],"names":["EmailJSResponseStatus","constructor","_status","arguments","length","undefined","_text","this","status","text","store","origin","blockHeadless","storageProvider","createWebStorage","localStorage","get","key","Promise","resolve","getItem","set","value","setItem","remove","removeItem","buildOptions","options","publicKey","toString","sendPost","async","url","data","headers","response","fetch","method","body","message","responseStatus","ok","validateParams","serviceID","templateID","isHeadless","navigator","webdriver","languages","headlessError","isBlockedValueInParams","params","_options$list","list","watchVariable","isBlockListDisabled","validateBlockListParams","Array","isArray","name","FormData","getValue","includes","blockedEmailError","isLimitRateHit","defaultID","storage","throttle","validateLimitRateParams","id","leftTime","lastTime","Number","Date","now","getLeftTime","limitRateError","form","opts","blockList","limitRate","reject","currentForm","document","querySelector","findHTMLForm","nodeName","validateForm","formData","location","pathname","append","FeedbackForm","useRef","_jsxs","className","children","_jsx","onSubmit","e","preventDefault","emailjs","current","then","console","log","error","type"],"sourceRoot":""}