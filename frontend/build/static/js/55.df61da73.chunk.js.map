{"version":3,"file":"static/js/55.df61da73.chunk.js","mappings":"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","sources":["components/Features/BasicInput.jsx","components/Features/SpeechRecogination.jsx","components/main/ProductCard.jsx","components/Features/CameraRecogination.jsx","components/main/Prod_navbar.jsx","pages/producer/AddItem.jsx","store/useStore.js","../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js","../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.min.js","../node_modules/use-sync-external-store/shim/index.js","../node_modules/use-sync-external-store/shim/with-selector.js","../node_modules/zustand/esm/vanilla.mjs","../node_modules/zustand/esm/index.mjs"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport useStore from \"../../store/useStore\";\r\n\r\nconst BasicInput = () => {\r\n    const [name, setName] = useState(\"\");\r\n    const [price, setPrice] = useState(1000);\r\n    const [stock, setStock] = useState(1);\r\n    const [photoPrev, setPhotoPrev] = useState(\"\");\r\n    const [photo, setPhoto] = useState(null);\r\n\r\n    const sendInputDataToBackend = useStore(state => state.sendInputDataToBackend);\r\n    const addInputData = useStore(state => state.addInputData);\r\n\r\n    const handleNameChange = (event) => {\r\n        setName(event.target.value);\r\n    };\r\n\r\n    const handlePriceChange = (event) => {\r\n        const value = event.target.value;\r\n        const parsedPrice = parseFloat(value);\r\n        setPrice(parsedPrice);\r\n    };\r\n\r\n    const handleStockChange = (event) => {\r\n        const value = event.target.value;\r\n        const parsedStock = parseInt(value, 10);\r\n        setStock(parsedStock);\r\n    };\r\n\r\n    const changeImageHandler = (e) => {\r\n        const file = e.target.files?.[0];\r\n\r\n        const reader = new FileReader();\r\n\r\n        if (file) {\r\n            reader.readAsDataURL(file);\r\n            reader.onloadend = () => {\r\n                if (typeof reader.result === \"string\") {\r\n                    setPhotoPrev(reader.result);\r\n                    setPhoto(file);\r\n                }\r\n            };\r\n        } else {\r\n            setPhotoPrev(\"\");\r\n            setPhoto(null);\r\n        }\r\n    };\r\n\r\n    const uploadImage = async (e) => {\r\n        const file = e.target.files[0];\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/api/v1/upload/new\", {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                setPhoto(data.filePath);\r\n                console.log(\"File path:\", data.filePath);\r\n            } else {\r\n                console.error(\"Failed to upload image\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error uploading image:\", error);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const data = { name, price, stock, photo };\r\n        sendInputDataToBackend(data);\r\n        addInputData(data);\r\n        setName(\"\");\r\n        setPrice(1000);\r\n        setStock(1);\r\n        setPhotoPrev(\"\");\r\n        setPhoto(null);\r\n    };\r\n\r\n    return (\r\n        <main className=\"product-management\">\r\n            <article>\r\n                <form onSubmit={handleSubmit}>\r\n                    <h2>New Product</h2>\r\n                    <div>\r\n                        <label>Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Name\"\r\n                            value={name}\r\n                            name=\"name\"\r\n                            onChange={handleNameChange}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Price</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            placeholder=\"Price\"\r\n                            value={price}\r\n                            name=\"price\"\r\n                            onChange={handlePriceChange}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Stock</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            placeholder=\"Stock\"\r\n                            value={stock}\r\n                            name=\"stock\"\r\n                            onChange={handleStockChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>Photo</label>\r\n                        <input type=\"file\" onChange={changeImageHandler} name=\"file\" />\r\n                    </div>\r\n\r\n                    {photoPrev && <img src={photoPrev} alt=\"NewImage\" />}\r\n                    <div>\r\n                        <label>Upload Image</label>\r\n                        <input type=\"file\" onChange={uploadImage} name=\"file\" />\r\n                    </div>\r\n                    <button type=\"submit\">Create</button>\r\n                </form>\r\n            </article>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default BasicInput;\r\n\r\n// import React, { useState } from \"react\";\r\n// import useStore from \"../../store/useStore\";\r\n\r\n// const BasicInput = () => {\r\n//     const [name, setName] = useState(\"\");\r\n//     const [price, setPrice] = useState(1000);\r\n//     const [stock, setStock] = useState(1);\r\n//     const [photoPrev, setPhotoPrev] = useState(\"\");\r\n//     const [photo, setPhoto] = useState(null);\r\n\r\n//     const sendInputDataToBackend = useStore(state => state.sendInputDataToBackend);\r\n//     const addInputData = useStore(state => state.addInputData);\r\n\r\n//     const handleNameChange = (event) => {\r\n//       setName(event.target.value);\r\n//     };\r\n\r\n//     // const handlePriceChange = (event) => {\r\n//     //   setPrice(event.target.value);\r\n//     // };\r\n\r\n//     const handlePriceChange = (event) => {\r\n//       const value = event.target.value; // Get the value from the input field\r\n//       const parsedPrice = parseFloat(value); // Parse the value to a floating-point number\r\n//       setPrice(parsedPrice); // Set the parsed price as the new state value\r\n//     };\r\n\r\n//     // const handleStockChange = (event) => {\r\n//     //   setStock(event.target.value);\r\n//     // };\r\n\r\n//     const handleStockChange = (event) => {\r\n//       const value = event.target.value; // Get the value from the input field\r\n//       const parsedStock = parseFloat(value); // Parse the value to a floating-point number\r\n//       setPrice(parsedStock); // Set the parsed price as the new state value\r\n//     };\r\n\r\n//     const changeImageHandler = (e) => {\r\n//       const file = e.target.files?.[0];\r\n  \r\n//       const reader = new FileReader();\r\n  \r\n//       if (file) {\r\n//         reader.readAsDataURL(file);\r\n//         reader.onloadend = () => {\r\n//           if (typeof reader.result === \"string\") {\r\n//             setPhotoPrev(reader.result);\r\n//             setPhoto(file);\r\n//           }\r\n//         };\r\n//       } else {\r\n//         // Clear the selected file and preview if the user cancels file selection\r\n//         setPhotoPrev(\"\");\r\n//         setPhoto(null);\r\n//       }\r\n//     };\r\n\r\n\r\n//     const uploadImage = async (e) => {\r\n//       const file = e.target.files[0];\r\n//       const formData = new FormData();\r\n//       formData.append(\"file\", file);\r\n  \r\n//       try {\r\n//         const response = await fetch(\"http://localhost:5000/api/v1/upload/new\", {\r\n//           method: \"POST\",\r\n//           body: formData,\r\n//         });\r\n//         if (response.ok) {\r\n//           const data = await response.json();\r\n//           setPhoto(data.filePath); // Assuming backend returns the file path\r\n//           console.log(\"File path:\", data.filePath);\r\n//         } else {\r\n//           console.error(\"Failed to upload image\");\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"Error uploading image:\", error);\r\n//       }\r\n//     };\r\n\r\n//     // const changeImageHandler = (e) => {\r\n//     //   const file = e.target.files?.[0];\r\n    \r\n//     //   const reader = new FileReader();\r\n    \r\n//     //   if (file) {\r\n//     //     reader.readAsDataURL(file);\r\n//     //     reader.onloadend = () => {\r\n//     //       if (typeof reader.result === \"string\") {\r\n//     //         setPhotoPrev(reader.result);\r\n//     //         setPhoto(file);\r\n//     //       }\r\n//     //     };\r\n//     //   } else {\r\n//     //     // Clear the selected file and preview if the user cancels file selection\r\n//     //     setPhotoPrev(\"\");\r\n//     //     setPhoto(null);\r\n//     //   }\r\n//     // };\r\n\r\n//     // const handleSubmit = (event) => {\r\n//     //   event.preventDefault();\r\n//     //   // Add form submission logic here, including sending data to backend\r\n//     //   console.log(\"Form submitted with data:\", { name, price, stock, photo });\r\n//     // };\r\n    \r\n\r\n//     const handleSubmit = (event) => {\r\n//       event.preventDefault();\r\n//       // Add the input data to the store\r\n//       const data = { name, price, stock, photo };\r\n//       sendInputDataToBackend(data);\r\n//       addInputData(data);\r\n//       // Reset form fields\r\n//       setName(\"\");\r\n//       setPrice(1000);\r\n//       setStock(1);\r\n//       setPhotoPrev(\"\");\r\n//       setPhoto(null);\r\n//     };\r\n\r\n//     return (\r\n//       <main className=\"product-management\">\r\n//         <article>\r\n//           <form onSubmit={handleSubmit}>\r\n//             <h2>New Product</h2>\r\n//             <div>\r\n//               <label>Name</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Name\"\r\n//                 value={name}\r\n//                 name=\"name\"\r\n//                 onChange={handleNameChange}\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label>Price</label>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 placeholder=\"Price\"\r\n//                 value={price}\r\n//                 name=\"price\"\r\n//                 onChange={handlePriceChange}\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <label>Stock</label>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 placeholder=\"Stock\"\r\n//                 value={stock}\r\n//                 name=\"stock\"\r\n//                 onChange={handleStockChange}\r\n//               />\r\n//             </div>\r\n\r\n//             <div>\r\n//               <label>Photo</label>\r\n//               <input type=\"file\" onChange={changeImageHandler} name=\"file\"/>\r\n//             </div>\r\n\r\n//             {photoPrev && <img src={photoPrev} alt=\"NewImage\"  />}\r\n//             <div>\r\n//             <label>Upload Image</label>\r\n//             <input type=\"file\" onChange={uploadImage} name=\"file\"/>\r\n//           </div>\r\n//             <button type=\"submit\">Create</button>\r\n//           </form>\r\n//         </article>\r\n//       </main>\r\n//     );\r\n// }\r\n\r\n// export default BasicInput;\r\n","import \"./Speech.css\";\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\nimport useClipboard from \"react-use-clipboard\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ProductCard from '../main/ProductCard';\r\n\r\nconst SpeechRecogination = () => {\r\n  const [textToCopy, setTextToCopy] = useState();\r\n  const [isCopied, setCopied] = useClipboard(textToCopy, {\r\n    successDuration: 1000\r\n  });\r\n  const [productData, setProductData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isListening, setIsListening] = useState(false); // New state for tracking if listening is active\r\n\r\n  const { transcript, browserSupportsSpeechRecognition, resetTranscript } = useSpeechRecognition();\r\n\r\n  const startListening = () => {\r\n    SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\r\n    setIsListening(true); // Update state to indicate that listening is active\r\n    setTimeout(() => {\r\n      stopListening(); // Stop listening after 10 seconds\r\n    }, 10000);\r\n  };\r\n\r\n  const stopListening = () => {\r\n    SpeechRecognition.stopListening();\r\n    setIsListening(false); // Update state to indicate that listening is not active\r\n    // Reset states\r\n    setTextToCopy(null);\r\n    setProductData(null);\r\n    setError(null);\r\n  };\r\n\r\n  const refreshData = () => {\r\n    // Reset states to refresh the displayed data\r\n    resetTranscript(); // Clear the transcript\r\n    setTextToCopy(null);\r\n    setProductData(null);\r\n    setError(null);\r\n    setIsListening(false); // Ensure listening state is updated\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (transcript) {\r\n      fetch(`http://localhost:3002/product?input=${encodeURIComponent(transcript)}`)\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Product not found');\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          setProductData(data);\r\n          console.log(data);\r\n          setError(null); // Clear any previous errors\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching product data:', error);\r\n          setError(error.message);\r\n          setProductData(null); // Clear product data if there's an error\r\n        });\r\n    }\r\n  }, [transcript]);\r\n\r\n  if (!browserSupportsSpeechRecognition) {\r\n    return <p>Your browser does not support speech recognition.</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"speech-container\">\r\n        <h2>Speech to Text Converter</h2>\r\n        <br />\r\n        <p>A React hook that converts speech from the microphone to text and makes it available to your React components.</p>\r\n\r\n        <div className=\"main-content\" onClick={() => setTextToCopy(transcript)}>\r\n          {transcript}\r\n        </div>\r\n\r\n        <div className=\"btn-style\">\r\n          <button onClick={setCopied}>\r\n            {isCopied ? 'Copied!' : 'Copy to clipboard'}\r\n          </button>\r\n          {isListening ? ( // Conditional rendering based on listening state\r\n            <button onClick={stopListening}>Stop Listening</button>\r\n          ) : (\r\n            <button onClick={startListening}>Start Listening</button>\r\n          )}\r\n          <button onClick={refreshData}>Refresh</button>\r\n        </div>\r\n        \r\n        {error ? (\r\n          <p>{error}</p>\r\n        ) : productData ? (\r\n          <ProductCard\r\n          className=\"product-card1\"\r\n            name={productData.name}\r\n            stock={productData.stock}\r\n            photo={productData.photo}\r\n            price={productData.price}\r\n          />\r\n        ) : (\r\n          <p>Loading product...</p>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpeechRecogination;\r\n\r\n\r\n// import \"./Speech.css\"\r\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n// import useClipboard from \"react-use-clipboard\";\r\n// import { useState, useEffect } from \"react\";\r\n// import ProductCard from '../main/ProductCard';\r\n\r\n// const SpeechRecogination = () => {\r\n//   const [textToCopy, setTextToCopy] = useState();\r\n//   const [isCopied, setCopied] = useClipboard(textToCopy, {\r\n//     successDuration: 1000\r\n//   });\r\n//   const [productData, setProductData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n//   const [isListening, setIsListening] = useState(false); // New state for tracking if listening is active\r\n\r\n\r\n//   const { transcript, browserSupportsSpeechRecognition, resetTranscript } = useSpeechRecognition();\r\n\r\n//   const startListening = () => {\r\n//     SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\r\n//     setIsListening(true); // Update state to indicate that listening is active\r\n//     setTimeout(() => {\r\n//       stopListening(); // Stop listening after 10 seconds\r\n//     }, 10000);\r\n//   };\r\n\r\n//   const stopListening = () => {\r\n//     SpeechRecognition.stopListening();\r\n//     setIsListening(false); // Update state to indicate that listening is not active\r\n//     // Reset transcript, productData, and error states to null\r\n//     setTextToCopy(null);\r\n//     setProductData(null);\r\n//     setError(null);\r\n//   };\r\n\r\n//   const refreshData = () => {\r\n//     // Reset states to refresh the displayed data\r\n//     SpeechRecognition.abortListening();\r\n//     setTextToCopy(null);\r\n//     setProductData(null);\r\n//     setError(null);\r\n//   };\r\n\r\n//   const { transcript, browserSupportsSpeechRecognition } = useSpeechRecognition();\r\n\r\n//   useEffect(() => {\r\n//     if (transcript) {\r\n//       fetch(`http://localhost:3002/product?input=${encodeURIComponent(transcript)}`)\r\n//         .then(response => {\r\n//           if (!response.ok) {\r\n//             throw new Error('Product not found');\r\n//           }\r\n//           return response.json();\r\n//         })\r\n//         .then(data => {\r\n//           setProductData(data);\r\n//           console.log(data);\r\n//           setError(null); // Clear any previous errors\r\n//         })\r\n//         .catch(error => {\r\n//           console.error('Error fetching product data:', error);\r\n//           setError(error.message);\r\n//           setProductData(null); // Clear product data if there's an error\r\n//         });\r\n//     }\r\n//   }, [transcript]);\r\n\r\n//   if (!browserSupportsSpeechRecognition) {\r\n//     return <p>Your browser does not support speech recognition.</p>;\r\n//   }\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"speech-container\">\r\n//         <h2>Speech to Text Converter</h2>\r\n//         <br />\r\n//         <p>A React hook that converts speech from the microphone to text and makes it available to your React components.</p>\r\n\r\n//         <div className=\"main-content\" onClick={() => setTextToCopy(transcript)}>\r\n//           {transcript}\r\n//         </div>\r\n\r\n//         <div className=\"btn-style\">\r\n//           <button onClick={setCopied}>\r\n//             {isCopied ? 'Copied!' : 'Copy to clipboard'}\r\n//           </button>\r\n//           {isListening ? ( // Conditional rendering based on listening state\r\n//             <button onClick={stopListening}>Stop Listening</button>\r\n//           ) : (\r\n//             <button onClick={startListening}>Start Listening</button>\r\n//           )}\r\n//           <button onClick={refreshData}>Refresh</button>\r\n//         </div>\r\n\r\n//         {error ? (\r\n//           <p>{error}</p>\r\n//         ) : productData ? (\r\n//           <ProductCard\r\n//             name={productData.name}\r\n//             stock={productData.stock}\r\n//             photo={productData.photo}\r\n//             price={productData.price}\r\n//           />\r\n//         ) : (\r\n//           <p>Loading product...</p>\r\n//         )}\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default SpeechRecogination;\r\n\r\n\r\n// // import \"./Speech.css\"\r\n// // import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n// // import useClipboard from \"react-use-clipboard\";\r\n// // import { useState, useEffect } from \"react\";\r\n// // import ProductCard from '../main/ProductCard';\r\n\r\n// // const SpeechRecogination = () => {\r\n// //   const [textToCopy, setTextToCopy] = useState();\r\n// //   const [isCopied, setCopied] = useClipboard(textToCopy, {\r\n// //     successDuration: 1000\r\n// //   });\r\n// //   const [productData, setProductData] = useState(null);\r\n// //   const [error, setError] = useState(null);\r\n\r\n// //   const startListening = () => {\r\n// //     SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\r\n// //     setTimeout(() => {\r\n// //       SpeechRecognition.stopListening();\r\n// //     }, 10000); // Stop listening after 10 seconds\r\n// //   };\r\n\r\n// //   const { transcript, browserSupportsSpeechRecognition } = useSpeechRecognition();\r\n\r\n// //   useEffect(() => {\r\n// //     if (transcript) {\r\n// //       fetch(`http://localhost:3002/product?input=${encodeURIComponent(transcript)}`)\r\n// //         .then(response => {\r\n// //           if (!response.ok) {\r\n// //             throw new Error('Product not found');\r\n// //           }\r\n// //           return response.json();\r\n// //         })\r\n// //         .then(data => {\r\n// //           setProductData(data);\r\n// //           console.log(data);\r\n// //           setError(null); // Clear any previous errors\r\n// //         })\r\n// //         .catch(error => {\r\n// //           console.error('Error fetching product data:', error);\r\n// //           setError(error.message);\r\n// //           setProductData(null); // Clear product data if there's an error\r\n// //         });\r\n// //     }\r\n// //   }, [transcript]);\r\n\r\n\r\n\r\n// //   if (!browserSupportsSpeechRecognition) {\r\n// //     return <p>Your browser does not support speech recognition.</p>;\r\n// //   }\r\n\r\n// //   return (\r\n// //     <>\r\n// //       <div className=\"speech-container\">\r\n// //         <h2>Speech to Text Converter</h2>\r\n// //         <br />\r\n// //         <p>A React hook that converts speech from the microphone to text and makes it available to your React components.</p>\r\n\r\n// //         <div className=\"main-content\" onClick={() => setTextToCopy(transcript)}>\r\n// //           {transcript}\r\n// //         </div>\r\n\r\n// //         <div className=\"btn-style\">\r\n// //           <button onClick={setCopied}>\r\n// //             {isCopied ? 'Copied!' : 'Copy to clipboard'}\r\n// //           </button>\r\n// //           <button onClick={startListening}>Start Listening</button>\r\n// //           <button onClick={SpeechRecognition.stopListening}>Stop Listening</button>\r\n// //         </div>\r\n\r\n// //         {error ? (\r\n// //           <p>{error}</p>\r\n// //         ) : productData ? (\r\n// //           <ProductCard\r\n// //             name={productData.name}\r\n// //             stock={productData.stock}\r\n// //             photo={productData.photo}\r\n// //             price={productData.price}\r\n// //           />\r\n// //         ) : (\r\n// //           <p>Loading product...</p>\r\n// //         )}\r\n// //       </div>\r\n// //     </>\r\n// //   );\r\n// // };\r\n\r\n// // export default SpeechRecogination;\r\n","import React from 'react';\r\nimport { FaPlus } from \"react-icons/fa\";\r\n\r\nconst ProductCard = ({\r\n  productId,\r\n  price,\r\n  name,\r\n  photo,\r\n  stock,\r\n  addToCart,\r\n}) => {\r\n  return (\r\n    <div className=\"product-card\">\r\n      <div className=\"image-container\">\r\n        <img src={photo} alt={name} />\r\n      </div>\r\n      <p>{name}</p>\r\n      <span>₹{price}</span>\r\n      <div className='svg'>\r\n        <button onClick={() => addToCart(productId)}>\r\n          <FaPlus />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductCard;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst UploadImage = () => {\r\n  const [imageUrl, setImageUrl] = useState('');\r\n  const [annotations, setAnnotations] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleImageUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Send image data to backend for recognition\r\n      const response = await axios.post('http://localhost:5000/api/v1/recognize/new', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n\r\n      // Update state with annotations received from the backend\r\n      setAnnotations(response.data.annotations);\r\n\r\n      // Display the uploaded image\r\n      setImageUrl(URL.createObjectURL(file));\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n      setError('Failed to recognize image');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p>Error: {error}</p>}\r\n      {imageUrl && <img src={imageUrl} alt=\"Uploaded\" style={{ maxWidth: '100%', marginTop: '20px' }} />}\r\n      {annotations.length > 0 && (\r\n        <div style={{ marginTop: '20px' }}>\r\n          <h3>Annotations</h3>\r\n          <ul>\r\n            {annotations.map((annotation, index) => (\r\n              <li key={index}>{annotation}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadImage;\r\n","import React from 'react';\r\nimport { GiFarmTractor } from 'react-icons/gi';\r\n\r\nconst Prod_navbar = () => {\r\n  const navbarStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    padding: '10px 20px',\r\n    backgroundColor: '#dfff8d',\r\n    borderBottom: '1px solid #e7e7e7',\r\n    backgroundColor: '#62a351'\r\n  };\r\n\r\n  const logoStyle = {\r\n    color: 'aliceblue',\r\n    fontSize: '30px',\r\n    fontWeight: 'bold',\r\n    //give left padding\r\n    paddingLeft: '10px',\r\n  };\r\n\r\n  const menuStyle = {\r\n    display: 'flex',\r\n    gap: '15px',\r\n  };\r\n\r\n  const itemStyle = {\r\n    color: 'aliceblue',\r\n    textDecoration: 'none',\r\n    fontSize: '22px',\r\n    fontWeight: 'bold',\r\n  };\r\n\r\n  return (\r\n    <nav style={navbarStyle}>\r\n      <div className=\"navbar__logo_prod\" style={logoStyle}>\r\n        <GiFarmTractor />\r\n      </div>\r\n      <div className=\"navbar__menu_prod\" style={menuStyle}>\r\n        <a href=\"/producer/additems\" className=\"navbar__item_prod\" style={itemStyle}>\r\n          Add Items\r\n        </a>\r\n        <a href=\"/signup\" className=\"navbar__item_prod\" style={itemStyle}>\r\n          Sign Up/Log in\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Prod_navbar;\r\n","import React, { useState } from 'react';\r\nimport SpeechRecogination from '../../components/Features/SpeechRecogination';\r\nimport CameraRecogination from '../../components/Features/CameraRecogination';\r\n//import Basic from '../../components/Features/Basic';\r\nimport BasicInput from '../../components/Features/BasicInput';\r\nimport Prod_navbar from '../../components/main/Prod_navbar';\r\n\r\nconst AddItem = () => {\r\n  const [selectedOption, setSelectedOption] = useState('');\r\n\r\n  const renderOption = () => {\r\n    switch (selectedOption) {\r\n      case 'SpeechRecogination':\r\n        return <SpeechRecogination />;\r\n      case 'CameraRecogination':\r\n        return <CameraRecogination />;\r\n      case 'Basic':\r\n        return <BasicInput />;\r\n      default:\r\n        return <BasicInput />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <Prod_navbar />\r\n    <div>\r\n      <div className=\"options\">\r\n      <button onClick={() => setSelectedOption('Basic')}>Basic</button>\r\n        <button onClick={() => setSelectedOption('SpeechRecogination')}>SpeechRecogination</button>\r\n        <button onClick={() => setSelectedOption('CameraRecogination')}>CameraRecogination</button>\r\n      </div>\r\n      <div className=\"selected-option\">\r\n        {renderOption()}\r\n      </div>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddItem;\r\n","import { create } from 'zustand';\r\nimport axios from 'axios';\r\n\r\nconst PRODUCT_API_URL = 'http://localhost:5000/api/v1/product';\r\nconst BACKEND_API_URL = 'http://localhost:5000/api/v1/product/new';\r\n\r\nconst useStore = create((set, get) => ({\r\n    cartItems: [],\r\n    foodList: [],\r\n    inputData: [],\r\n\r\n    addToCart: async (productId) => {\r\n        try {\r\n            const response = await axios.get(`${PRODUCT_API_URL}/${productId}`);\r\n            const product = response.data;\r\n            const existingProductIndex = get().cartItems.findIndex((item) => item._id === productId);\r\n\r\n            if (existingProductIndex !== -1) {\r\n                const updatedCartItems = [...get().cartItems];\r\n                updatedCartItems[existingProductIndex].quantity += 1;\r\n                set({ cartItems: updatedCartItems });\r\n            } else {\r\n                const updatedCartItems = [...get().cartItems, { ...product, quantity: 1 }];\r\n                set({ cartItems: updatedCartItems });\r\n            }\r\n\r\n            console.log(`Product ${product.name} added to cart`);\r\n        } catch (error) {\r\n            console.error('Error adding product to cart:', error);\r\n        }\r\n    },\r\n\r\n    removeFromCart: (productId) => set((state) => {\r\n        const newCartItems = [...state.cartItems];\r\n        const existingProductIndex = newCartItems.findIndex((item) => item._id === productId);\r\n        if (existingProductIndex !== -1) {\r\n            newCartItems[existingProductIndex].quantity -= 1;\r\n            if (newCartItems[existingProductIndex].quantity === 0) {\r\n                newCartItems.splice(existingProductIndex, 1);\r\n            }\r\n        }\r\n        return { cartItems: newCartItems };\r\n    }),\r\n\r\n    getTotalCartAmount: () => {\r\n        const { cartItems } = get();\r\n        let total = 0;\r\n        cartItems.forEach((item) => {\r\n            total += item.price * item.quantity;\r\n        });\r\n        return total;\r\n    },\r\n\r\n    setFoodList: (foodList) => set({ foodList }),\r\n\r\n    fetchFoodList: async () => {\r\n        try {\r\n            const response = await axios.get(PRODUCT_API_URL);\r\n            set({ foodList: response.data });\r\n        } catch (error) {\r\n            console.error('Failed to fetch food list:', error);\r\n        }\r\n    },\r\n\r\n    addInputData: (data) => {\r\n        console.log('Input data:', data);\r\n        set((state) => ({ inputData: [...state.inputData, data] }));\r\n    },\r\n\r\n    sendInputDataToBackend: async (data) => {\r\n        try {\r\n            const token = 'Dabbemein4098'; // Replace this with your actual token\r\n\r\n            const formattedData = {\r\n                name: data.name,\r\n                photo: data.photo,\r\n                price: parseFloat(data.price),\r\n                stock: parseInt(data.stock, 10),\r\n            };\r\n\r\n            const response = await axios.post(BACKEND_API_URL, formattedData, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Adjust based on backend requirements\r\n                },\r\n            });\r\n\r\n            console.log('Input data sent to the backend:', response.data);\r\n        } catch (error) {\r\n            console.error('Error sending input data to the backend:', error);\r\n        }\r\n    },\r\n}));\r\n\r\nexport default useStore;\r\n\r\n// import { create } from 'zustand';\r\n// import axios from 'axios';\r\n\r\n// const PRODUCT_API_URL = 'http://localhost:5000/api/v1/product';\r\n// const BACKEND_API_URL = 'http://localhost:5000/api/v1/product/new';\r\n\r\n// const useStore = create((set, get) => ({\r\n//     cartItems: [],\r\n//     foodList: [],\r\n//     inputData: [],\r\n\r\n//     addToCart: async (productId) => {\r\n//         try {\r\n//             const response = await axios.get(`${PRODUCT_API_URL}/${productId}`);\r\n//             const product = response.data;\r\n//             const existingProductIndex = get().cartItems.findIndex((item) => item._id === productId);\r\n\r\n//             if (existingProductIndex !== -1) {\r\n//                 const updatedCartItems = [...get().cartItems];\r\n//                 updatedCartItems[existingProductIndex].quantity += 1;\r\n//                 set({ cartItems: updatedCartItems });\r\n//             } else {\r\n//                 const updatedCartItems = [...get().cartItems, { ...product, quantity: 1 }];\r\n//                 set({ cartItems: updatedCartItems });\r\n//             }\r\n\r\n//             console.log(`Product ${product.name} added to cart`);\r\n//         } catch (error) {\r\n//             console.error('Error adding product to cart:', error);\r\n//         }\r\n//     },\r\n\r\n//     removeFromCart: (productId) => set((state) => {\r\n//         const newCartItems = [...state.cartItems];\r\n//         const existingProductIndex = newCartItems.findIndex((item) => item._id === productId);\r\n//         if (existingProductIndex !== -1) {\r\n//             newCartItems[existingProductIndex].quantity -= 1;\r\n//             if (newCartItems[existingProductIndex].quantity === 0) {\r\n//                 newCartItems.splice(existingProductIndex, 1);\r\n//             }\r\n//         }\r\n//         return { cartItems: newCartItems };\r\n//     }),\r\n\r\n//     getTotalCartAmount: () => {\r\n//         const { cartItems } = get();\r\n//         let total = 0;\r\n//         cartItems.forEach((item) => {\r\n//             total += item.price * item.quantity;\r\n//         });\r\n//         return total;\r\n//     },\r\n\r\n//     setFoodList: (foodList) => set({ foodList }),\r\n\r\n//     fetchFoodList: async () => {\r\n//         try {\r\n//             const response = await axios.get(PRODUCT_API_URL);\r\n//             set({ foodList: response.data });\r\n//         } catch (error) {\r\n//             console.error('Failed to fetch food list:', error);\r\n//         }\r\n//     },\r\n\r\n//     addInputData: (data) => {\r\n//         console.log('Input data:', data);\r\n//         set((state) => ({ inputData: [...state.inputData, data] }));\r\n//     },\r\n\r\n//     sendInputDataToBackend: async (data) => {\r\n//         try {\r\n//             const formattedData = {\r\n//                 \"name\": data.name,\r\n//                 \"photo\": data.photo,\r\n//                 \"price\": parseFloat(data.price),\r\n//                 \"stock\": parseInt(data.stock, 10),\r\n//             };\r\n\r\n//             const response = await axios.post(BACKEND_API_URL, formattedData);\r\n//             console.log('Input data sent to the backend:', response.data);\r\n//         } catch (error) {\r\n//             console.error('Error sending input data to the backend:', error);\r\n//         }\r\n//     },\r\n// }));\r\n\r\n// export default useStore;\r\n\r\n\r\n// // import { create } from 'zustand';\r\n// // import axios from 'axios';\r\n\r\n// // // Example backend URL endpoint\r\n// // const PRODUCT_API_URL = 'http://localhost:5000/api/v1/product';\r\n// // const BACKEND_API_URL = 'http://localhost:5000/api/v1/product/new';\r\n\r\n// // const useStore = create((set, get) => ({\r\n// //   cartItems: [], // Initialize as an empty array\r\n// //   foodList: [], // Empty initially\r\n// //   inputData: [],\r\n\r\n// //   // addToCart: async (productId) => {\r\n// //   //   try {\r\n// //   //     // Fetch the product details from the backend API\r\n// //   //     const response = await axios.get(`${PRODUCT_API_URL}/${productId}`);\r\n// //   //     const product = response.data; // Assuming the response data contains the product details\r\n\r\n// //   //     // Check if the product already exists in the cart\r\n// //   //     const existingProductIndex = get().cartItems.findIndex((item) => item.productId === productId);\r\n\r\n// //   //     if (existingProductIndex !== -1) {\r\n// //   //       // If the product already exists, increment its quantity\r\n// //   //       const updatedCartItems = [...get().cartItems];\r\n// //   //       updatedCartItems[existingProductIndex].quantity += 1;\r\n// //   //       set({ cartItems: updatedCartItems });\r\n// //   //     } else {\r\n// //   //       // If the product doesn't exist, add it to the cart\r\n// //   //       const updatedCartItems = [...get().cartItems, { ...product, quantity: 1 }];\r\n// //   //       set({ cartItems: updatedCartItems });\r\n// //   //     }\r\n\r\n// //   //     // Log the action\r\n// //   //     console.log(`Product ${product.name} added to cart`);\r\n// //   //   } catch (error) {\r\n// //   //     console.error('Error adding product to cart:', error);\r\n// //   //   }\r\n// //   // },\r\n\r\n// //   addToCart: async (productId) => {\r\n// //     try {\r\n// //       // Fetch the product details from the backend API\r\n// //       const response = await axios.get(`${PRODUCT_API_URL}/${productId}`);\r\n// //       const product = response.data; // Assuming the response data contains the product details\r\n\r\n// //       // Check if the product already exists in the cart\r\n// //       const existingProductIndex = get().cartItems.findIndex((item) => item._id === productId);\r\n\r\n// //       if (existingProductIndex !== -1) {\r\n// //         // If the product already exists, increment its quantity\r\n// //         const updatedCartItems = [...get().cartItems];\r\n// //         updatedCartItems[existingProductIndex].quantity += 1;\r\n// //         set({ cartItems: updatedCartItems });\r\n// //       } else {\r\n// //         // If the product doesn't exist, add it to the cart\r\n// //         const updatedCartItems = [...get().cartItems, { ...product, quantity: 1 }];\r\n// //         set({ cartItems: updatedCartItems });\r\n// //       }\r\n\r\n// //       // Log the action\r\n// //       console.log(`Product ${product.name} added to cart`);\r\n// //     } catch (error) {\r\n// //       console.error('Error adding product to cart:', error);\r\n// //     }\r\n// //   },\r\n\r\n// //   // removeFromCart: (productId) => set((state) => {\r\n// //   //   const newCartItems = [...state.cartItems]; // Convert cartItems to an array\r\n// //   //   const existingProductIndex = get().cartItems.findIndex((item) => item.productId === productId);\r\n// //   //   if (existingProductIndex !== -1) {\r\n// //   //     newCartItems[existingProductIndex].quantity -= 1;\r\n// //   //     if (newCartItems[existingProductIndex].quantity === 0) {\r\n// //   //       newCartItems.splice(existingProductIndex, 1); // Remove the item if quantity becomes 0\r\n// //   //     }\r\n// //   //   }\r\n// //   //   return { cartItems: newCartItems };\r\n// //   // }),\r\n\r\n// //   removeFromCart: (productId) => set((state) => {\r\n// //     const newCartItems = [...state.cartItems]; // Convert cartItems to an array\r\n// //     const existingProductIndex = newCartItems.findIndex((item) => item._id === productId);\r\n// //     if (existingProductIndex !== -1) {\r\n// //       newCartItems[existingProductIndex].quantity -= 1;\r\n// //       if (newCartItems[existingProductIndex].quantity === 0) {\r\n// //         newCartItems.splice(existingProductIndex, 1); // Remove the item if quantity becomes 0\r\n// //       }\r\n// //     }\r\n// //     return { cartItems: newCartItems };\r\n// //   }),\r\n// //   getTotalCartAmount: () => {\r\n// //     const { cartItems } = get(); // No need for foodList\r\n// //     let total = 0;\r\n// //     cartItems.forEach((item) => {\r\n// //       total += item.price * item.quantity;\r\n// //     });\r\n// //     return total;\r\n// //   },\r\n\r\n// //   setFoodList: (foodList) => set({ foodList }),\r\n\r\n// //   // Fetch food list from backend\r\n// //   fetchFoodList: async () => {\r\n// //     try {\r\n// //       const response = await axios.get(PRODUCT_API_URL);\r\n// //       set({ foodList: response.data });\r\n// //     } catch (error) {\r\n// //       console.error('Failed to fetch food list:', error);\r\n// //     }\r\n// //   },\r\n// //   addInputData: (data) => {\r\n// //     // Function to add input data to the inputData array\r\n// //     console.log('Input data:', data);\r\n// //     set((state) => ({ inputData: [...state.inputData, data] }));\r\n// //   },\r\n  \r\n// //   sendInputDataToBackend: async (data) => {\r\n// //       try {\r\n// //         // Send input data to the backend\r\n// //         const formattedData = {\r\n// //           \"name\": `${data.name}`,\r\n// //           \"photo\": `${data.photo}`,\r\n// //           \"price\": parseFloat(data.price), // Convert price to a number if needed\r\n// //           \"stock\": parseInt(data.stock), // Convert stock to a number if needed\r\n// //         };\r\n    \r\n// //         // Send input data to the backend\r\n// //         console.log('Input data:', formattedData);\r\n// //         //console.log('Input data:', data);\r\n// //         // const response = await axios.post(BACKEND_API_URL, data);\r\n// //         const response = await axios.post(`${BACKEND_API_URL}`, formattedData);\r\n// //         console.log('Input data sent to the backend:', response.data);\r\n// //       } catch (error) {\r\n// //         console.error('Error sending input data to the backend:', error);\r\n// //       }\r\n// //     },\r\n// // }));\r\n\r\n\r\n\r\n// // export default useStore;\r\n","/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var e=require(\"react\");function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k=\"function\"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}\nfunction r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u=\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;\n","/**\n * @license React\n * use-sync-external-store-shim/with-selector.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var h=require(\"react\"),n=require(\"use-sync-external-store/shim\");function p(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var q=\"function\"===typeof Object.is?Object.is:p,r=n.useSyncExternalStore,t=h.useRef,u=h.useEffect,v=h.useMemo,w=h.useDebugValue;\nexports.useSyncExternalStoreWithSelector=function(a,b,e,l,g){var c=t(null);if(null===c.current){var f={hasValue:!1,value:null};c.current=f}else f=c.current;c=v(function(){function a(a){if(!c){c=!0;d=a;a=l(a);if(void 0!==g&&f.hasValue){var b=f.value;if(g(b,a))return k=b}return k=a}b=k;if(q(d,a))return b;var e=l(a);if(void 0!==g&&g(b,e))return b;d=a;return k=e}var c=!1,d,k,m=void 0===e?null:e;return[function(){return a(b())},null===m?void 0:function(){return a(m())}]},[b,e,l,g]);var d=r(a,c[0],c[1]);\nu(function(){f.hasValue=!0;f.value=d},[d]);w(d);return d};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim/with-selector.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim/with-selector.development.js');\n}\n","const createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const getInitialState = () => initialState;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.\"\n      );\n    }\n    listeners.clear();\n  };\n  const api = { setState, getState, getInitialState, subscribe, destroy };\n  const initialState = state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\nvar vanilla = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.\"\n    );\n  }\n  return createStore(createState);\n};\n\nexport { createStore, vanilla as default };\n","import { createStore } from 'zustand/vanilla';\nexport * from 'zustand/vanilla';\nimport ReactExports from 'react';\nimport useSyncExternalStoreExports from 'use-sync-external-store/shim/with-selector.js';\n\nconst { useDebugValue } = ReactExports;\nconst { useSyncExternalStoreWithSelector } = useSyncExternalStoreExports;\nlet didWarnAboutEqualityFn = false;\nconst identity = (arg) => arg;\nfunction useStore(api, selector = identity, equalityFn) {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && equalityFn && !didWarnAboutEqualityFn) {\n    console.warn(\n      \"[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937\"\n    );\n    didWarnAboutEqualityFn = true;\n  }\n  const slice = useSyncExternalStoreWithSelector(\n    api.subscribe,\n    api.getState,\n    api.getServerState || api.getInitialState,\n    selector,\n    equalityFn\n  );\n  useDebugValue(slice);\n  return slice;\n}\nconst createImpl = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && typeof createState !== \"function\") {\n    console.warn(\n      \"[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.\"\n    );\n  }\n  const api = typeof createState === \"function\" ? createStore(createState) : createState;\n  const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn);\n  Object.assign(useBoundStore, api);\n  return useBoundStore;\n};\nconst create = (createState) => createState ? createImpl(createState) : createImpl;\nvar react = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`.\"\n    );\n  }\n  return create(createState);\n};\n\nexport { create, react as default, useStore };\n"],"names":["BasicInput","name","setName","useState","price","setPrice","stock","setStock","photoPrev","setPhotoPrev","photo","setPhoto","sendInputDataToBackend","useStore","state","addInputData","_jsx","className","children","_jsxs","onSubmit","event","preventDefault","data","type","placeholder","value","onChange","target","parsedPrice","parseFloat","parsedStock","parseInt","e","_e$target$files","file","files","reader","FileReader","readAsDataURL","onloadend","result","src","alt","async","formData","FormData","append","response","fetch","method","body","ok","json","filePath","console","log","error","SpeechRecogination","textToCopy","setTextToCopy","isCopied","setCopied","useClipboard","successDuration","productData","setProductData","setError","isListening","setIsListening","transcript","browserSupportsSpeechRecognition","resetTranscript","useSpeechRecognition","stopListening","SpeechRecognition","useEffect","concat","encodeURIComponent","then","Error","catch","message","_Fragment","onClick","startListening","continuous","language","setTimeout","refreshData","ProductCard","_ref","productId","addToCart","FaPlus","UploadImage","imageUrl","setImageUrl","annotations","setAnnotations","loading","setLoading","style","textAlign","accept","axios","post","headers","URL","createObjectURL","maxWidth","marginTop","length","map","annotation","index","Prod_navbar","itemStyle","color","textDecoration","fontSize","fontWeight","display","justifyContent","alignItems","padding","backgroundColor","borderBottom","paddingLeft","GiFarmTractor","gap","href","AddItem","selectedOption","setSelectedOption","renderOption","CameraRecogination","PRODUCT_API_URL","create","set","get","cartItems","foodList","inputData","product","existingProductIndex","findIndex","item","_id","updatedCartItems","quantity","removeFromCart","newCartItems","splice","getTotalCartAmount","total","forEach","setFoodList","fetchFoodList","token","formattedData","Authorization","require","k","Object","is","a","b","l","m","n","useLayoutEffect","p","useDebugValue","r","getSnapshot","d","f","u","window","document","createElement","inst","c","g","exports","useSyncExternalStore","h","q","t","useRef","v","useMemo","w","useSyncExternalStoreWithSelector","current","hasValue","module","createStoreImpl","createState","listeners","Set","setState","partial","replace","nextState","previousState","assign","listener","getState","api","getInitialState","initialState","subscribe","add","delete","destroy","warn","clear","createStore","ReactExports","useSyncExternalStoreExports","didWarnAboutEqualityFn","identity","arg","createImpl","useBoundStore","selector","equalityFn","arguments","undefined","slice","getServerState"],"sourceRoot":""}