{"version":3,"file":"static/js/241.f712a192.chunk.js","mappings":"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","sources":["components/Features/SpeechRecogination.jsx","components/main/ProductCard.jsx"],"sourcesContent":["import \"./Speech.css\";\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\nimport useClipboard from \"react-use-clipboard\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ProductCard from '../main/ProductCard';\r\n\r\nconst SpeechRecogination = () => {\r\n  const [textToCopy, setTextToCopy] = useState();\r\n  const [isCopied, setCopied] = useClipboard(textToCopy, {\r\n    successDuration: 1000\r\n  });\r\n  const [productData, setProductData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isListening, setIsListening] = useState(false); // New state for tracking if listening is active\r\n\r\n  const { transcript, browserSupportsSpeechRecognition, resetTranscript } = useSpeechRecognition();\r\n\r\n  const startListening = () => {\r\n    SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\r\n    setIsListening(true); // Update state to indicate that listening is active\r\n    setTimeout(() => {\r\n      stopListening(); // Stop listening after 10 seconds\r\n    }, 10000);\r\n  };\r\n\r\n  const stopListening = () => {\r\n    SpeechRecognition.stopListening();\r\n    setIsListening(false); // Update state to indicate that listening is not active\r\n    // Reset states\r\n    setTextToCopy(null);\r\n    setProductData(null);\r\n    setError(null);\r\n  };\r\n\r\n  const refreshData = () => {\r\n    // Reset states to refresh the displayed data\r\n    resetTranscript(); // Clear the transcript\r\n    setTextToCopy(null);\r\n    setProductData(null);\r\n    setError(null);\r\n    setIsListening(false); // Ensure listening state is updated\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (transcript) {\r\n      fetch(`http://localhost:3002/product?input=${encodeURIComponent(transcript)}`)\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Product not found');\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          setProductData(data);\r\n          console.log(data);\r\n          setError(null); // Clear any previous errors\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching product data:', error);\r\n          setError(error.message);\r\n          setProductData(null); // Clear product data if there's an error\r\n        });\r\n    }\r\n  }, [transcript]);\r\n\r\n  if (!browserSupportsSpeechRecognition) {\r\n    return <p>Your browser does not support speech recognition.</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"speech-container\">\r\n        <h2>Speech to Text Converter</h2>\r\n        <br />\r\n        <p>A React hook that converts speech from the microphone to text and makes it available to your React components.</p>\r\n\r\n        <div className=\"main-content\" onClick={() => setTextToCopy(transcript)}>\r\n          {transcript}\r\n        </div>\r\n\r\n        <div className=\"btn-style\">\r\n          <button onClick={setCopied}>\r\n            {isCopied ? 'Copied!' : 'Copy to clipboard'}\r\n          </button>\r\n          {isListening ? ( // Conditional rendering based on listening state\r\n            <button onClick={stopListening}>Stop Listening</button>\r\n          ) : (\r\n            <button onClick={startListening}>Start Listening</button>\r\n          )}\r\n          <button onClick={refreshData}>Refresh</button>\r\n        </div>\r\n        \r\n        {error ? (\r\n          <p>{error}</p>\r\n        ) : productData ? (\r\n          <ProductCard\r\n          className=\"product-card1\"\r\n            name={productData.name}\r\n            stock={productData.stock}\r\n            photo={productData.photo}\r\n            price={productData.price}\r\n          />\r\n        ) : (\r\n          <p>Loading product...</p>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpeechRecogination;\r\n\r\n\r\n// import \"./Speech.css\"\r\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n// import useClipboard from \"react-use-clipboard\";\r\n// import { useState, useEffect } from \"react\";\r\n// import ProductCard from '../main/ProductCard';\r\n\r\n// const SpeechRecogination = () => {\r\n//   const [textToCopy, setTextToCopy] = useState();\r\n//   const [isCopied, setCopied] = useClipboard(textToCopy, {\r\n//     successDuration: 1000\r\n//   });\r\n//   const [productData, setProductData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n//   const [isListening, setIsListening] = useState(false); // New state for tracking if listening is active\r\n\r\n\r\n//   const { transcript, browserSupportsSpeechRecognition, resetTranscript } = useSpeechRecognition();\r\n\r\n//   const startListening = () => {\r\n//     SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\r\n//     setIsListening(true); // Update state to indicate that listening is active\r\n//     setTimeout(() => {\r\n//       stopListening(); // Stop listening after 10 seconds\r\n//     }, 10000);\r\n//   };\r\n\r\n//   const stopListening = () => {\r\n//     SpeechRecognition.stopListening();\r\n//     setIsListening(false); // Update state to indicate that listening is not active\r\n//     // Reset transcript, productData, and error states to null\r\n//     setTextToCopy(null);\r\n//     setProductData(null);\r\n//     setError(null);\r\n//   };\r\n\r\n//   const refreshData = () => {\r\n//     // Reset states to refresh the displayed data\r\n//     SpeechRecognition.abortListening();\r\n//     setTextToCopy(null);\r\n//     setProductData(null);\r\n//     setError(null);\r\n//   };\r\n\r\n//   const { transcript, browserSupportsSpeechRecognition } = useSpeechRecognition();\r\n\r\n//   useEffect(() => {\r\n//     if (transcript) {\r\n//       fetch(`http://localhost:3002/product?input=${encodeURIComponent(transcript)}`)\r\n//         .then(response => {\r\n//           if (!response.ok) {\r\n//             throw new Error('Product not found');\r\n//           }\r\n//           return response.json();\r\n//         })\r\n//         .then(data => {\r\n//           setProductData(data);\r\n//           console.log(data);\r\n//           setError(null); // Clear any previous errors\r\n//         })\r\n//         .catch(error => {\r\n//           console.error('Error fetching product data:', error);\r\n//           setError(error.message);\r\n//           setProductData(null); // Clear product data if there's an error\r\n//         });\r\n//     }\r\n//   }, [transcript]);\r\n\r\n//   if (!browserSupportsSpeechRecognition) {\r\n//     return <p>Your browser does not support speech recognition.</p>;\r\n//   }\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"speech-container\">\r\n//         <h2>Speech to Text Converter</h2>\r\n//         <br />\r\n//         <p>A React hook that converts speech from the microphone to text and makes it available to your React components.</p>\r\n\r\n//         <div className=\"main-content\" onClick={() => setTextToCopy(transcript)}>\r\n//           {transcript}\r\n//         </div>\r\n\r\n//         <div className=\"btn-style\">\r\n//           <button onClick={setCopied}>\r\n//             {isCopied ? 'Copied!' : 'Copy to clipboard'}\r\n//           </button>\r\n//           {isListening ? ( // Conditional rendering based on listening state\r\n//             <button onClick={stopListening}>Stop Listening</button>\r\n//           ) : (\r\n//             <button onClick={startListening}>Start Listening</button>\r\n//           )}\r\n//           <button onClick={refreshData}>Refresh</button>\r\n//         </div>\r\n\r\n//         {error ? (\r\n//           <p>{error}</p>\r\n//         ) : productData ? (\r\n//           <ProductCard\r\n//             name={productData.name}\r\n//             stock={productData.stock}\r\n//             photo={productData.photo}\r\n//             price={productData.price}\r\n//           />\r\n//         ) : (\r\n//           <p>Loading product...</p>\r\n//         )}\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default SpeechRecogination;\r\n\r\n\r\n// // import \"./Speech.css\"\r\n// // import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n// // import useClipboard from \"react-use-clipboard\";\r\n// // import { useState, useEffect } from \"react\";\r\n// // import ProductCard from '../main/ProductCard';\r\n\r\n// // const SpeechRecogination = () => {\r\n// //   const [textToCopy, setTextToCopy] = useState();\r\n// //   const [isCopied, setCopied] = useClipboard(textToCopy, {\r\n// //     successDuration: 1000\r\n// //   });\r\n// //   const [productData, setProductData] = useState(null);\r\n// //   const [error, setError] = useState(null);\r\n\r\n// //   const startListening = () => {\r\n// //     SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\r\n// //     setTimeout(() => {\r\n// //       SpeechRecognition.stopListening();\r\n// //     }, 10000); // Stop listening after 10 seconds\r\n// //   };\r\n\r\n// //   const { transcript, browserSupportsSpeechRecognition } = useSpeechRecognition();\r\n\r\n// //   useEffect(() => {\r\n// //     if (transcript) {\r\n// //       fetch(`http://localhost:3002/product?input=${encodeURIComponent(transcript)}`)\r\n// //         .then(response => {\r\n// //           if (!response.ok) {\r\n// //             throw new Error('Product not found');\r\n// //           }\r\n// //           return response.json();\r\n// //         })\r\n// //         .then(data => {\r\n// //           setProductData(data);\r\n// //           console.log(data);\r\n// //           setError(null); // Clear any previous errors\r\n// //         })\r\n// //         .catch(error => {\r\n// //           console.error('Error fetching product data:', error);\r\n// //           setError(error.message);\r\n// //           setProductData(null); // Clear product data if there's an error\r\n// //         });\r\n// //     }\r\n// //   }, [transcript]);\r\n\r\n\r\n\r\n// //   if (!browserSupportsSpeechRecognition) {\r\n// //     return <p>Your browser does not support speech recognition.</p>;\r\n// //   }\r\n\r\n// //   return (\r\n// //     <>\r\n// //       <div className=\"speech-container\">\r\n// //         <h2>Speech to Text Converter</h2>\r\n// //         <br />\r\n// //         <p>A React hook that converts speech from the microphone to text and makes it available to your React components.</p>\r\n\r\n// //         <div className=\"main-content\" onClick={() => setTextToCopy(transcript)}>\r\n// //           {transcript}\r\n// //         </div>\r\n\r\n// //         <div className=\"btn-style\">\r\n// //           <button onClick={setCopied}>\r\n// //             {isCopied ? 'Copied!' : 'Copy to clipboard'}\r\n// //           </button>\r\n// //           <button onClick={startListening}>Start Listening</button>\r\n// //           <button onClick={SpeechRecognition.stopListening}>Stop Listening</button>\r\n// //         </div>\r\n\r\n// //         {error ? (\r\n// //           <p>{error}</p>\r\n// //         ) : productData ? (\r\n// //           <ProductCard\r\n// //             name={productData.name}\r\n// //             stock={productData.stock}\r\n// //             photo={productData.photo}\r\n// //             price={productData.price}\r\n// //           />\r\n// //         ) : (\r\n// //           <p>Loading product...</p>\r\n// //         )}\r\n// //       </div>\r\n// //     </>\r\n// //   );\r\n// // };\r\n\r\n// // export default SpeechRecogination;\r\n","import React from 'react';\r\nimport { FaPlus } from \"react-icons/fa\";\r\n\r\nconst ProductCard = ({\r\n  productId,\r\n  price,\r\n  name,\r\n  photo,\r\n  stock,\r\n  addToCart,\r\n}) => {\r\n  return (\r\n    <div className=\"product-card\">\r\n      <div className=\"image-container\">\r\n        <img src={photo} alt={name} />\r\n      </div>\r\n      <p>{name}</p>\r\n      <span>₹{price}</span>\r\n      <div className='svg'>\r\n        <button onClick={() => addToCart(productId)}>\r\n          <FaPlus />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductCard;\r\n"],"names":["SpeechRecogination","textToCopy","setTextToCopy","useState","isCopied","setCopied","useClipboard","successDuration","productData","setProductData","error","setError","isListening","setIsListening","transcript","browserSupportsSpeechRecognition","resetTranscript","useSpeechRecognition","stopListening","SpeechRecognition","useEffect","fetch","concat","encodeURIComponent","then","response","ok","Error","json","data","console","log","catch","message","_jsx","_Fragment","children","_jsxs","className","onClick","startListening","continuous","language","setTimeout","refreshData","ProductCard","name","stock","photo","price","_ref","productId","addToCart","src","alt","FaPlus"],"sourceRoot":""}