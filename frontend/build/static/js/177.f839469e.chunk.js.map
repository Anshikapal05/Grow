{"version":3,"file":"static/js/177.f839469e.chunk.js","mappings":"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","sources":["pages/consumer/PlaceOrder.jsx","store/useStore.js","../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js","../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.min.js","../node_modules/use-sync-external-store/shim/index.js","../node_modules/use-sync-external-store/shim/with-selector.js","../node_modules/zustand/esm/vanilla.mjs","../node_modules/zustand/esm/index.mjs"],"sourcesContent":["// src/pages/consumer/PlaceOrder.jsx\r\nimport React, { useState } from \"react\";\r\nimport useStore from \"../../store/useStore\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\nconst PlaceOrder = () => {\r\n  const getTotalCartAmount = useStore((state) => state.getTotalCartAmount);\r\n  //const [loading, setLoading] = useState(false);\r\n  const [email, setEmail] = useState(''); // State to store email\r\n  const [street, setStreet] = useState(''); // State to store street\r\n  const [city, setCity] = useState(''); // State to store city\r\n  const [state, setState] = useState(''); // State to store state\r\n  const [postalCode, setPostalCode] = useState(''); // State to store postal code\r\n  const [country, setCountry] = useState(''); // State to store country\r\n  const cartItems = useStore((state) => state.cartItems); // Get cart items from the store\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handlePlaceOrder = async () => {\r\n    try {\r\n      //setLoading(true); // Set loading state to true\r\n      const response = await axios.post('http://localhost:5000/api/v1/order/new', {\r\n        user:  email , // Send email in user object\r\n        products: cartItems, // Send cart items to the backend\r\n        shippingAddress: {\r\n          street,\r\n          city,\r\n          state,\r\n          postalCode,\r\n          country\r\n        },\r\n        status: 'pending',\r\n        totalAmount: getTotalCartAmount() // Send total amount to the backend\r\n      });\r\n      console.log('Order placed:', response.data);\r\n      //setLoading(false); // Set loading state to false after successful order placement\r\n      navigate('/payment'); // Navigate to the payment page\r\n    } catch (error) {\r\n      console.error('Error placing order:', error);\r\n      //setLoading(false); // Set loading state to false in case of error\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <form className=\"place-order\" onSubmit={handlePlaceOrder}>\r\n      <div className=\"place-order-left\">\r\n        <p className=\"title\">Delivery Information</p>\r\n        <div className=\"multi-fields\">\r\n          <input type=\"text\" placeholder=\"First name\" />\r\n          <input type=\"text\" placeholder=\"Last name\" />\r\n        </div>\r\n        <input type=\"email\" placeholder=\"Email address\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n        <input type=\"text\" placeholder=\"Street\" value={street} onChange={(e) => setStreet(e.target.value)} />\r\n        <div className=\"multi-fields\">\r\n          <input type=\"text\" placeholder=\"City\" value={city} onChange={(e) => setCity(e.target.value)} />\r\n          <input type=\"text\" placeholder=\"State\" value={state} onChange={(e) => setState(e.target.value)} />\r\n        </div>\r\n        <div className=\"multi-fields\">\r\n          <input type=\"text\" placeholder=\"Zip code\" value={postalCode} onChange={(e) => setPostalCode(e.target.value)} />\r\n          <input type=\"text\" placeholder=\"Country\" value={country} onChange={(e) => setCountry(e.target.value)} />\r\n        </div>\r\n        <input type=\"text\" placeholder=\"Phone\" />\r\n      </div>\r\n      <div className=\"place-order-right\">\r\n      <div className=\"cart-total\">\r\n          <h2>Cart totals</h2>\r\n          <div>\r\n            <div className=\"cart-total-details\">\r\n              <p>Subtotal</p>\r\n              <p>${getTotalCartAmount()}</p>\r\n            </div>\r\n            <hr />\r\n            <div className=\"cart-total-details\">\r\n              <p>Delivery Fee</p>\r\n              <p>${getTotalCartAmount() === 0 ? 0 : 2}</p>\r\n            </div>\r\n            <hr />\r\n            <div className=\"cart-total-details\">\r\n              <b>Total</b>\r\n              <b>${getTotalCartAmount() === 0 ? 0 : getTotalCartAmount() + 2}</b>\r\n            </div>\r\n          </div>\r\n          <button onClick={() => navigate(\"/payment\")}>PROCEED TO PAYMENT</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PlaceOrder;\r\n","import { create } from 'zustand';\r\nimport axios from 'axios';\r\n\r\nconst PRODUCT_API_URL = 'http://localhost:5000/api/v1/product';\r\nconst BACKEND_API_URL = 'http://localhost:5000/api/v1/product/new';\r\n\r\nconst useStore = create((set, get) => ({\r\n    cartItems: [],\r\n    foodList: [],\r\n    inputData: [],\r\n\r\n    addToCart: async (productId) => {\r\n        try {\r\n            const response = await axios.get(`${PRODUCT_API_URL}/${productId}`);\r\n            const product = response.data;\r\n            const existingProductIndex = get().cartItems.findIndex((item) => item._id === productId);\r\n\r\n            if (existingProductIndex !== -1) {\r\n                const updatedCartItems = [...get().cartItems];\r\n                updatedCartItems[existingProductIndex].quantity += 1;\r\n                set({ cartItems: updatedCartItems });\r\n            } else {\r\n                const updatedCartItems = [...get().cartItems, { ...product, quantity: 1 }];\r\n                set({ cartItems: updatedCartItems });\r\n            }\r\n\r\n            console.log(`Product ${product.name} added to cart`);\r\n        } catch (error) {\r\n            console.error('Error adding product to cart:', error);\r\n        }\r\n    },\r\n\r\n    removeFromCart: (productId) => set((state) => {\r\n        const newCartItems = [...state.cartItems];\r\n        const existingProductIndex = newCartItems.findIndex((item) => item._id === productId);\r\n        if (existingProductIndex !== -1) {\r\n            newCartItems[existingProductIndex].quantity -= 1;\r\n            if (newCartItems[existingProductIndex].quantity === 0) {\r\n                newCartItems.splice(existingProductIndex, 1);\r\n            }\r\n        }\r\n        return { cartItems: newCartItems };\r\n    }),\r\n\r\n    getTotalCartAmount: () => {\r\n        const { cartItems } = get();\r\n        let total = 0;\r\n        cartItems.forEach((item) => {\r\n            total += item.price * item.quantity;\r\n        });\r\n        return total;\r\n    },\r\n\r\n    setFoodList: (foodList) => set({ foodList }),\r\n\r\n    fetchFoodList: async () => {\r\n        try {\r\n            const response = await axios.get(PRODUCT_API_URL);\r\n            set({ foodList: response.data });\r\n        } catch (error) {\r\n            console.error('Failed to fetch food list:', error);\r\n        }\r\n    },\r\n\r\n    addInputData: (data) => {\r\n        console.log('Input data:', data);\r\n        set((state) => ({ inputData: [...state.inputData, data] }));\r\n    },\r\n\r\n    sendInputDataToBackend: async (data) => {\r\n        try {\r\n            const token = 'Dabbemein4098'; // Replace this with your actual token\r\n\r\n            const formattedData = {\r\n                name: data.name,\r\n                photo: data.photo,\r\n                price: parseFloat(data.price),\r\n                stock: parseInt(data.stock, 10),\r\n            };\r\n\r\n            const response = await axios.post(BACKEND_API_URL, formattedData, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Adjust based on backend requirements\r\n                },\r\n            });\r\n\r\n            console.log('Input data sent to the backend:', response.data);\r\n        } catch (error) {\r\n            console.error('Error sending input data to the backend:', error);\r\n        }\r\n    },\r\n}));\r\n\r\nexport default useStore;\r\n\r\n// import { create } from 'zustand';\r\n// import axios from 'axios';\r\n\r\n// const PRODUCT_API_URL = 'http://localhost:5000/api/v1/product';\r\n// const BACKEND_API_URL = 'http://localhost:5000/api/v1/product/new';\r\n\r\n// const useStore = create((set, get) => ({\r\n//     cartItems: [],\r\n//     foodList: [],\r\n//     inputData: [],\r\n\r\n//     addToCart: async (productId) => {\r\n//         try {\r\n//             const response = await axios.get(`${PRODUCT_API_URL}/${productId}`);\r\n//             const product = response.data;\r\n//             const existingProductIndex = get().cartItems.findIndex((item) => item._id === productId);\r\n\r\n//             if (existingProductIndex !== -1) {\r\n//                 const updatedCartItems = [...get().cartItems];\r\n//                 updatedCartItems[existingProductIndex].quantity += 1;\r\n//                 set({ cartItems: updatedCartItems });\r\n//             } else {\r\n//                 const updatedCartItems = [...get().cartItems, { ...product, quantity: 1 }];\r\n//                 set({ cartItems: updatedCartItems });\r\n//             }\r\n\r\n//             console.log(`Product ${product.name} added to cart`);\r\n//         } catch (error) {\r\n//             console.error('Error adding product to cart:', error);\r\n//         }\r\n//     },\r\n\r\n//     removeFromCart: (productId) => set((state) => {\r\n//         const newCartItems = [...state.cartItems];\r\n//         const existingProductIndex = newCartItems.findIndex((item) => item._id === productId);\r\n//         if (existingProductIndex !== -1) {\r\n//             newCartItems[existingProductIndex].quantity -= 1;\r\n//             if (newCartItems[existingProductIndex].quantity === 0) {\r\n//                 newCartItems.splice(existingProductIndex, 1);\r\n//             }\r\n//         }\r\n//         return { cartItems: newCartItems };\r\n//     }),\r\n\r\n//     getTotalCartAmount: () => {\r\n//         const { cartItems } = get();\r\n//         let total = 0;\r\n//         cartItems.forEach((item) => {\r\n//             total += item.price * item.quantity;\r\n//         });\r\n//         return total;\r\n//     },\r\n\r\n//     setFoodList: (foodList) => set({ foodList }),\r\n\r\n//     fetchFoodList: async () => {\r\n//         try {\r\n//             const response = await axios.get(PRODUCT_API_URL);\r\n//             set({ foodList: response.data });\r\n//         } catch (error) {\r\n//             console.error('Failed to fetch food list:', error);\r\n//         }\r\n//     },\r\n\r\n//     addInputData: (data) => {\r\n//         console.log('Input data:', data);\r\n//         set((state) => ({ inputData: [...state.inputData, data] }));\r\n//     },\r\n\r\n//     sendInputDataToBackend: async (data) => {\r\n//         try {\r\n//             const formattedData = {\r\n//                 \"name\": data.name,\r\n//                 \"photo\": data.photo,\r\n//                 \"price\": parseFloat(data.price),\r\n//                 \"stock\": parseInt(data.stock, 10),\r\n//             };\r\n\r\n//             const response = await axios.post(BACKEND_API_URL, formattedData);\r\n//             console.log('Input data sent to the backend:', response.data);\r\n//         } catch (error) {\r\n//             console.error('Error sending input data to the backend:', error);\r\n//         }\r\n//     },\r\n// }));\r\n\r\n// export default useStore;\r\n\r\n\r\n// // import { create } from 'zustand';\r\n// // import axios from 'axios';\r\n\r\n// // // Example backend URL endpoint\r\n// // const PRODUCT_API_URL = 'http://localhost:5000/api/v1/product';\r\n// // const BACKEND_API_URL = 'http://localhost:5000/api/v1/product/new';\r\n\r\n// // const useStore = create((set, get) => ({\r\n// //   cartItems: [], // Initialize as an empty array\r\n// //   foodList: [], // Empty initially\r\n// //   inputData: [],\r\n\r\n// //   // addToCart: async (productId) => {\r\n// //   //   try {\r\n// //   //     // Fetch the product details from the backend API\r\n// //   //     const response = await axios.get(`${PRODUCT_API_URL}/${productId}`);\r\n// //   //     const product = response.data; // Assuming the response data contains the product details\r\n\r\n// //   //     // Check if the product already exists in the cart\r\n// //   //     const existingProductIndex = get().cartItems.findIndex((item) => item.productId === productId);\r\n\r\n// //   //     if (existingProductIndex !== -1) {\r\n// //   //       // If the product already exists, increment its quantity\r\n// //   //       const updatedCartItems = [...get().cartItems];\r\n// //   //       updatedCartItems[existingProductIndex].quantity += 1;\r\n// //   //       set({ cartItems: updatedCartItems });\r\n// //   //     } else {\r\n// //   //       // If the product doesn't exist, add it to the cart\r\n// //   //       const updatedCartItems = [...get().cartItems, { ...product, quantity: 1 }];\r\n// //   //       set({ cartItems: updatedCartItems });\r\n// //   //     }\r\n\r\n// //   //     // Log the action\r\n// //   //     console.log(`Product ${product.name} added to cart`);\r\n// //   //   } catch (error) {\r\n// //   //     console.error('Error adding product to cart:', error);\r\n// //   //   }\r\n// //   // },\r\n\r\n// //   addToCart: async (productId) => {\r\n// //     try {\r\n// //       // Fetch the product details from the backend API\r\n// //       const response = await axios.get(`${PRODUCT_API_URL}/${productId}`);\r\n// //       const product = response.data; // Assuming the response data contains the product details\r\n\r\n// //       // Check if the product already exists in the cart\r\n// //       const existingProductIndex = get().cartItems.findIndex((item) => item._id === productId);\r\n\r\n// //       if (existingProductIndex !== -1) {\r\n// //         // If the product already exists, increment its quantity\r\n// //         const updatedCartItems = [...get().cartItems];\r\n// //         updatedCartItems[existingProductIndex].quantity += 1;\r\n// //         set({ cartItems: updatedCartItems });\r\n// //       } else {\r\n// //         // If the product doesn't exist, add it to the cart\r\n// //         const updatedCartItems = [...get().cartItems, { ...product, quantity: 1 }];\r\n// //         set({ cartItems: updatedCartItems });\r\n// //       }\r\n\r\n// //       // Log the action\r\n// //       console.log(`Product ${product.name} added to cart`);\r\n// //     } catch (error) {\r\n// //       console.error('Error adding product to cart:', error);\r\n// //     }\r\n// //   },\r\n\r\n// //   // removeFromCart: (productId) => set((state) => {\r\n// //   //   const newCartItems = [...state.cartItems]; // Convert cartItems to an array\r\n// //   //   const existingProductIndex = get().cartItems.findIndex((item) => item.productId === productId);\r\n// //   //   if (existingProductIndex !== -1) {\r\n// //   //     newCartItems[existingProductIndex].quantity -= 1;\r\n// //   //     if (newCartItems[existingProductIndex].quantity === 0) {\r\n// //   //       newCartItems.splice(existingProductIndex, 1); // Remove the item if quantity becomes 0\r\n// //   //     }\r\n// //   //   }\r\n// //   //   return { cartItems: newCartItems };\r\n// //   // }),\r\n\r\n// //   removeFromCart: (productId) => set((state) => {\r\n// //     const newCartItems = [...state.cartItems]; // Convert cartItems to an array\r\n// //     const existingProductIndex = newCartItems.findIndex((item) => item._id === productId);\r\n// //     if (existingProductIndex !== -1) {\r\n// //       newCartItems[existingProductIndex].quantity -= 1;\r\n// //       if (newCartItems[existingProductIndex].quantity === 0) {\r\n// //         newCartItems.splice(existingProductIndex, 1); // Remove the item if quantity becomes 0\r\n// //       }\r\n// //     }\r\n// //     return { cartItems: newCartItems };\r\n// //   }),\r\n// //   getTotalCartAmount: () => {\r\n// //     const { cartItems } = get(); // No need for foodList\r\n// //     let total = 0;\r\n// //     cartItems.forEach((item) => {\r\n// //       total += item.price * item.quantity;\r\n// //     });\r\n// //     return total;\r\n// //   },\r\n\r\n// //   setFoodList: (foodList) => set({ foodList }),\r\n\r\n// //   // Fetch food list from backend\r\n// //   fetchFoodList: async () => {\r\n// //     try {\r\n// //       const response = await axios.get(PRODUCT_API_URL);\r\n// //       set({ foodList: response.data });\r\n// //     } catch (error) {\r\n// //       console.error('Failed to fetch food list:', error);\r\n// //     }\r\n// //   },\r\n// //   addInputData: (data) => {\r\n// //     // Function to add input data to the inputData array\r\n// //     console.log('Input data:', data);\r\n// //     set((state) => ({ inputData: [...state.inputData, data] }));\r\n// //   },\r\n  \r\n// //   sendInputDataToBackend: async (data) => {\r\n// //       try {\r\n// //         // Send input data to the backend\r\n// //         const formattedData = {\r\n// //           \"name\": `${data.name}`,\r\n// //           \"photo\": `${data.photo}`,\r\n// //           \"price\": parseFloat(data.price), // Convert price to a number if needed\r\n// //           \"stock\": parseInt(data.stock), // Convert stock to a number if needed\r\n// //         };\r\n    \r\n// //         // Send input data to the backend\r\n// //         console.log('Input data:', formattedData);\r\n// //         //console.log('Input data:', data);\r\n// //         // const response = await axios.post(BACKEND_API_URL, data);\r\n// //         const response = await axios.post(`${BACKEND_API_URL}`, formattedData);\r\n// //         console.log('Input data sent to the backend:', response.data);\r\n// //       } catch (error) {\r\n// //         console.error('Error sending input data to the backend:', error);\r\n// //       }\r\n// //     },\r\n// // }));\r\n\r\n\r\n\r\n// // export default useStore;\r\n","/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var e=require(\"react\");function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k=\"function\"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}\nfunction r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u=\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;\n","/**\n * @license React\n * use-sync-external-store-shim/with-selector.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var h=require(\"react\"),n=require(\"use-sync-external-store/shim\");function p(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var q=\"function\"===typeof Object.is?Object.is:p,r=n.useSyncExternalStore,t=h.useRef,u=h.useEffect,v=h.useMemo,w=h.useDebugValue;\nexports.useSyncExternalStoreWithSelector=function(a,b,e,l,g){var c=t(null);if(null===c.current){var f={hasValue:!1,value:null};c.current=f}else f=c.current;c=v(function(){function a(a){if(!c){c=!0;d=a;a=l(a);if(void 0!==g&&f.hasValue){var b=f.value;if(g(b,a))return k=b}return k=a}b=k;if(q(d,a))return b;var e=l(a);if(void 0!==g&&g(b,e))return b;d=a;return k=e}var c=!1,d,k,m=void 0===e?null:e;return[function(){return a(b())},null===m?void 0:function(){return a(m())}]},[b,e,l,g]);var d=r(a,c[0],c[1]);\nu(function(){f.hasValue=!0;f.value=d},[d]);w(d);return d};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim/with-selector.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim/with-selector.development.js');\n}\n","const createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const getInitialState = () => initialState;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.\"\n      );\n    }\n    listeners.clear();\n  };\n  const api = { setState, getState, getInitialState, subscribe, destroy };\n  const initialState = state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\nvar vanilla = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.\"\n    );\n  }\n  return createStore(createState);\n};\n\nexport { createStore, vanilla as default };\n","import { createStore } from 'zustand/vanilla';\nexport * from 'zustand/vanilla';\nimport ReactExports from 'react';\nimport useSyncExternalStoreExports from 'use-sync-external-store/shim/with-selector.js';\n\nconst { useDebugValue } = ReactExports;\nconst { useSyncExternalStoreWithSelector } = useSyncExternalStoreExports;\nlet didWarnAboutEqualityFn = false;\nconst identity = (arg) => arg;\nfunction useStore(api, selector = identity, equalityFn) {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && equalityFn && !didWarnAboutEqualityFn) {\n    console.warn(\n      \"[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937\"\n    );\n    didWarnAboutEqualityFn = true;\n  }\n  const slice = useSyncExternalStoreWithSelector(\n    api.subscribe,\n    api.getState,\n    api.getServerState || api.getInitialState,\n    selector,\n    equalityFn\n  );\n  useDebugValue(slice);\n  return slice;\n}\nconst createImpl = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && typeof createState !== \"function\") {\n    console.warn(\n      \"[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.\"\n    );\n  }\n  const api = typeof createState === \"function\" ? createStore(createState) : createState;\n  const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn);\n  Object.assign(useBoundStore, api);\n  return useBoundStore;\n};\nconst create = (createState) => createState ? createImpl(createState) : createImpl;\nvar react = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`.\"\n    );\n  }\n  return create(createState);\n};\n\nexport { create, react as default, useStore };\n"],"names":["PlaceOrder","getTotalCartAmount","useStore","state","email","setEmail","useState","street","setStreet","city","setCity","setState","postalCode","setPostalCode","country","setCountry","cartItems","navigate","useNavigate","_jsxs","className","onSubmit","async","response","axios","post","user","products","shippingAddress","status","totalAmount","console","log","data","error","children","_jsx","type","placeholder","value","onChange","e","target","onClick","PRODUCT_API_URL","create","set","get","foodList","inputData","addToCart","product","concat","productId","existingProductIndex","findIndex","item","_id","updatedCartItems","quantity","name","removeFromCart","newCartItems","splice","total","forEach","price","setFoodList","fetchFoodList","addInputData","sendInputDataToBackend","token","formattedData","photo","parseFloat","stock","parseInt","headers","Authorization","require","k","Object","is","a","b","l","m","useEffect","n","useLayoutEffect","p","useDebugValue","r","getSnapshot","d","f","u","window","document","createElement","inst","c","g","exports","useSyncExternalStore","h","q","t","useRef","v","useMemo","w","useSyncExternalStoreWithSelector","current","hasValue","module","createStoreImpl","createState","listeners","Set","partial","replace","nextState","previousState","assign","listener","getState","api","getInitialState","initialState","subscribe","add","delete","destroy","warn","clear","createStore","ReactExports","useSyncExternalStoreExports","didWarnAboutEqualityFn","identity","arg","createImpl","useBoundStore","selector","equalityFn","arguments","length","undefined","slice","getServerState"],"sourceRoot":""}